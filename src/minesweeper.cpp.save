#include "minesweeper.h"

Msweep::Msweep():
    board((tile_t *)(::operator new(sizeof(tile_t) * MSWEEP_ROWS_DEFAULT * MSWEEP_COLUMNS_DEFAULT))),
    rows(MSWEEP_ROWS_DEFAULT),
    columns(MSWEEP_COLUMNS_DEFAULT),
    mines(MSWEEP_MINES_DEFAULT)
{ }

Msweep::Msweep(std::size_t new_rows,
               std::size_t new_columns,
               std::size_t new_mines):
    rows((new_rows < MSWEEP_ROWS_MAX) ? new_rows : MSWEEP_ROWS_MAX),
    columns((new_columns < MSWEEP_COLUMNS_MAX) ? new_columns : MSWEEP_COLUMNS_MAX),
    mines((new_mines < new_rows * new_columns - 1) ? new_mines : new_rows * new_columns - 1)
{
    mines = (new_mines < rows * columns - 1) ? new_mines : rows * columns - 1;
    board = (tile_t *)(::operator new(sizeof(tile_t) * rows * columns));
}

void Msweep::play()
{
    srand(time(NULL));

    insertMines(0, 0);

    print();

    system("sleep 1");

    sweep(0, 0);

    print();

    /*
    insertMines(0, 0);

    floodfill(0, 0);

    print();
    */
}

void Msweep::insertMines(std::size_t start_row, std::size_t start_column)
{
    std::size_t mine_count;
    std::size_t row;
    std::size_t column;

    while (current_mines < mines)
    {
        row = rand() % rows;
        column = rand() % columns;

        if (row != start_row || column != start_column || board[i * columns + j].tile != '*')
        {
            ++mine_count;
            
        }
    }
}

bool Msweep::sweep(std::size_t i, std::size_t j)
{
    if (board[i * columns + j].flag == true)
        return true;

    board[i * columns + j].view = true;

    if (board[i * columns + j].tile == '*')
        return false;

    if (board[i * columns + j].tile == '-')
        floodfill(i, j);

    return true;
}

void Msweep::print()
{
    std::size_t i;
    std::size_t j;

    system("clear");

    printf("   ");

    for (i = 0; i < columns; ++i)
    {
        printf(" %2lu", i + 1);
    }

    printf("\n  +-");

    for (i = 0; i < columns; ++i)
    {
        printf("---");
    }

    printf("\n");

    for (i = 0; i < rows; ++i)
    {
        printf("%2lu| ", i + 1);

        for (j = 0; j < columns; ++j)
        {
            //flags
            if (board[i * columns + j].flag == true)
            {
                printf(" ? ");
            }
            else if (board[i * columns + j].view == false)
            {
                printf(" # ");
            }
            else
            {
                putchar(' ');
                putchar(board[i * columns + j].tile);
                putchar(' ');
            }
        }

        printf("\n");
    }
}

Msweep::~Msweep()
{
    delete board;
}
